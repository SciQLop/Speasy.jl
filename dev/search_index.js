var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Main-Functions","page":"API Reference","title":"Main Functions","text":"","category":"section"},{"location":"api/#Speasy.get_data-api","page":"API Reference","title":"Speasy.get_data","text":"get_data(args...; drop_nan=false)\n\nGet data using speasy Python package. We support the same arguments as speasy.get_data.\n\nSet drop_nan=true to drop the nan values. Note that we need to do that in Python since we cannot convert NaT (not a time) to Julia.\n\n\n\n\n\n","category":"function"},{"location":"api/#Speasy.@spz_str-api","page":"API Reference","title":"Speasy.@spz_str","text":"spz\"provider/dataset/parameter\"\nspz\"provider/dataset/parameter1,parameter2\"\n\nString macro to create a SpeasyProduct from a string identifier. Supports multiple parameters separated by commas, which returns a tuple of SpeasyProduct objects.\n\nExamples\n\n# Single parameter\nproduct = spz\"cda/OMNI_HRO_1MIN/flow_speed\"\n\n# Multiple parameters\nproducts = spz\"cda/OMNI_HRO_1MIN/flow_speed,Pressure\"\n\n\n\n\n\n","category":"macro"},{"location":"api/#Speasy.list_parameters-api","page":"API Reference","title":"Speasy.list_parameters","text":"list_parameters(provider, [dataset]; verbose=false)\n\nFind the available parameters for a given provider or for a specific dataset from provider.\n\nSet verbose=true to print the metadata of the dataset.\n\nExamples\n\n# List all parameters from AMDA provider\nlist_parameters(:amda)\n\n# List parameters from specific CDA dataset\nlist_parameters(:cda, \"SOHO_ERNE-HED_L2-1MIN\")\n\n# output\n5-element Vector{String}:\n \"est\"\n \"PH\"\n \"AH\"\n \"PHC\"\n \"AHC\"\n\nSee also: find_datasets\n\n\n\n\n\n","category":"function"},{"location":"api/#Speasy.find_datasets-api","page":"API Reference","title":"Speasy.find_datasets","text":"find_datasets(provider, [term...])\n\nFind the available datasets for a given provider, optionally filtered by search terms (only datasets containing all specified terms will be returned.)\n\nExamples\n\n# List all datasets from AMDA provider\nfind_datasets(:amda)\n\n# List CDA datasets containing \"OMNI\"\nfind_datasets(:cda, :OMNI)\n\n# List CDA datasets containing both \"OMNI\" and \"HRO\"\nfind_datasets(:cda, :OMNI, :HRO)\n\n# output\n4-element Vector{String}:\n \"OMNI_HRO_1MIN\"\n \"OMNI_HRO2_1MIN\"\n \"OMNI_HRO_5MIN\"\n \"OMNI_HRO2_5MIN\"\n\nSee also: list_parameters\n\n\n\n\n\n","category":"function"},{"location":"api/#Data-Types","page":"API Reference","title":"Data Types","text":"","category":"section"},{"location":"api/#Speasy.SpeasyVariable-api","page":"API Reference","title":"Speasy.SpeasyVariable","text":"A wrapper of speasy.SpeasyVariable.\n\n\n\n\n\n","category":"type"},{"location":"api/#Speasy.VariableAxis-api","page":"API Reference","title":"Speasy.VariableAxis","text":"A wrapper of speasy.VariableAxis. https://github.com/SciQLop/speasy/blob/main/speasy/core/data_containers.py#L234\n\n\n\n\n\n","category":"type"},{"location":"api/#Data-Access-and-Processing","page":"API Reference","title":"Data Access and Processing","text":"","category":"section"},{"location":"api/#Speasy.sanitize!-api","page":"API Reference","title":"Speasy.sanitize!","text":"Replaces invalid values and fill values by NaN for var with float type elements.\n\n\n\n\n\n","category":"function"},{"location":"api/#Speasy.replace_invalid!-api","page":"API Reference","title":"Speasy.replace_invalid!","text":"Replaces invalid values by NaN for var with float type elements.\n\n\n\n\n\n","category":"function"},{"location":"api/#Speasy.replace_fillval_by_nan!-api","page":"API Reference","title":"Speasy.replace_fillval_by_nan!","text":"Replaces fill values by NaN for var with float type elements.\n\n\n\n\n\n","category":"function"},{"location":"api/#Public","page":"API Reference","title":"Public","text":"","category":"section"},{"location":"api/#Speasy.Speasy","page":"API Reference","title":"Speasy.Speasy","text":"A Julia wrapper around speasy, a Python package to deal with main Space Physics WebServices.\n\nSpace Physics made EASY!\n\nLinks: GitHub, Documentation\n\n\n\n\n\n","category":"module"},{"location":"api/#Speasy.SpeasyVariable","page":"API Reference","title":"Speasy.SpeasyVariable","text":"A wrapper of speasy.SpeasyVariable.\n\n\n\n\n\n","category":"type"},{"location":"api/#Speasy.VariableAxis","page":"API Reference","title":"Speasy.VariableAxis","text":"A wrapper of speasy.VariableAxis. https://github.com/SciQLop/speasy/blob/main/speasy/core/data_containers.py#L234\n\n\n\n\n\n","category":"type"},{"location":"api/#Speasy.find_datasets-Tuple{Any}","page":"API Reference","title":"Speasy.find_datasets","text":"find_datasets(provider, [term...])\n\nFind the available datasets for a given provider, optionally filtered by search terms (only datasets containing all specified terms will be returned.)\n\nExamples\n\n# List all datasets from AMDA provider\nfind_datasets(:amda)\n\n# List CDA datasets containing \"OMNI\"\nfind_datasets(:cda, :OMNI)\n\n# List CDA datasets containing both \"OMNI\" and \"HRO\"\nfind_datasets(:cda, :OMNI, :HRO)\n\n# output\n4-element Vector{String}:\n \"OMNI_HRO_1MIN\"\n \"OMNI_HRO2_1MIN\"\n \"OMNI_HRO_5MIN\"\n \"OMNI_HRO2_5MIN\"\n\nSee also: list_parameters\n\n\n\n\n\n","category":"method"},{"location":"api/#Speasy.get_data-Tuple","page":"API Reference","title":"Speasy.get_data","text":"get_data(args...; drop_nan=false)\n\nGet data using speasy Python package. We support the same arguments as speasy.get_data.\n\nSet drop_nan=true to drop the nan values. Note that we need to do that in Python since we cannot convert NaT (not a time) to Julia.\n\n\n\n\n\n","category":"method"},{"location":"api/#Speasy.list_parameters-Tuple{Any}","page":"API Reference","title":"Speasy.list_parameters","text":"list_parameters(provider, [dataset]; verbose=false)\n\nFind the available parameters for a given provider or for a specific dataset from provider.\n\nSet verbose=true to print the metadata of the dataset.\n\nExamples\n\n# List all parameters from AMDA provider\nlist_parameters(:amda)\n\n# List parameters from specific CDA dataset\nlist_parameters(:cda, \"SOHO_ERNE-HED_L2-1MIN\")\n\n# output\n5-element Vector{String}:\n \"est\"\n \"PH\"\n \"AH\"\n \"PHC\"\n \"AHC\"\n\nSee also: find_datasets\n\n\n\n\n\n","category":"method"},{"location":"api/#Speasy.replace_fillval_by_nan!-Tuple{Any}","page":"API Reference","title":"Speasy.replace_fillval_by_nan!","text":"Replaces fill values by NaN for var with float type elements.\n\n\n\n\n\n","category":"method"},{"location":"api/#Speasy.replace_invalid!-Tuple{Any}","page":"API Reference","title":"Speasy.replace_invalid!","text":"Replaces invalid values by NaN for var with float type elements.\n\n\n\n\n\n","category":"method"},{"location":"api/#Speasy.sanitize!-Tuple{Any}","page":"API Reference","title":"Speasy.sanitize!","text":"Replaces invalid values and fill values by NaN for var with float type elements.\n\n\n\n\n\n","category":"method"},{"location":"api/#Speasy.@spz_str-Tuple{Any}","page":"API Reference","title":"Speasy.@spz_str","text":"spz\"provider/dataset/parameter\"\nspz\"provider/dataset/parameter1,parameter2\"\n\nString macro to create a SpeasyProduct from a string identifier. Supports multiple parameters separated by commas, which returns a tuple of SpeasyProduct objects.\n\nExamples\n\n# Single parameter\nproduct = spz\"cda/OMNI_HRO_1MIN/flow_speed\"\n\n# Multiple parameters\nproducts = spz\"cda/OMNI_HRO_1MIN/flow_speed,Pressure\"\n\n\n\n\n\n","category":"macro"},{"location":"#Speasy.jl","page":"Home","title":"Speasy.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Speasy.jl provides access to space physics data from various web services including:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Automated Multi-Dataset Analysis (AMDA)\nCoordinated Data Analysis Web (CDAWeb)\nCluster Science Archive (CSA)\nSatellite Situation Center Web (SSCWeb)","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Easy access to space physics data with a unified interface get_data\nIntegration with popular Julia packages like DimensionalData.jl.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"Speasy\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Speasy\n\n# Get Interplanetary Magnetic Field data\nimf_data = get_data(\"amda/imf\", \"2016-6-2\", \"2016-6-5\")\n\n# Use dynamic inventory\nconst spz = speasy\namda_tree = spz.inventories.data_tree.amda\nace_data = get_data(amda_tree.Parameters.ACE.MFI.ace_imf_all.imf, \"2016-6-2\", \"2016-6-5\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Loading Order\nIt is advisable to load Speasy.jl before other packages, as it relies on OpenSSL underpinnings. Compatibility issues may arise between Python and Julia if it is not prioritized accordingly.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This tutorial demonstrates how to use Speasy.jl to access space physics data.","category":"page"},{"location":"tutorial/#Basic-Data-Retrieval","page":"Tutorial","title":"Basic Data Retrieval","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The simplest way to get data is using string identifiers with get_data:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Speasy\n\n# Get IMF data from AMDA\nimf_data = get_data(\"amda/imf\", \"2016-6-2\", \"2016-6-3\")","category":"page"},{"location":"tutorial/#Find-the-available-datasets-and-parameters","page":"Tutorial","title":"Find the available datasets and parameters","text":"","category":"section"},{"location":"tutorial/#Speasy.find_datasets-tutorial","page":"Tutorial","title":"Speasy.find_datasets","text":"find_datasets(provider, [term...])\n\nFind the available datasets for a given provider, optionally filtered by search terms (only datasets containing all specified terms will be returned.)\n\nExamples\n\n# List all datasets from AMDA provider\nfind_datasets(:amda)\n\n# List CDA datasets containing \"OMNI\"\nfind_datasets(:cda, :OMNI)\n\n# List CDA datasets containing both \"OMNI\" and \"HRO\"\nfind_datasets(:cda, :OMNI, :HRO)\n\n# output\n4-element Vector{String}:\n \"OMNI_HRO_1MIN\"\n \"OMNI_HRO2_1MIN\"\n \"OMNI_HRO_5MIN\"\n \"OMNI_HRO2_5MIN\"\n\nSee also: list_parameters\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#Speasy.list_parameters-tutorial","page":"Tutorial","title":"Speasy.list_parameters","text":"list_parameters(provider, [dataset]; verbose=false)\n\nFind the available parameters for a given provider or for a specific dataset from provider.\n\nSet verbose=true to print the metadata of the dataset.\n\nExamples\n\n# List all parameters from AMDA provider\nlist_parameters(:amda)\n\n# List parameters from specific CDA dataset\nlist_parameters(:cda, \"SOHO_ERNE-HED_L2-1MIN\")\n\n# output\n5-element Vector{String}:\n \"est\"\n \"PH\"\n \"AH\"\n \"PHC\"\n \"AHC\"\n\nSee also: find_datasets\n\n\n\n\n\n","category":"function"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"list_parameters(:cda, \"SOHO_ERNE-HED_L2-1MIN\"; verbose=true)","category":"page"},{"location":"tutorial/#Using-Dynamic-Inventory","page":"Tutorial","title":"Using Dynamic Inventory","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The dynamic inventory allows you to browse available datasets interactively:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Create a shorthand reference\nconst spz = speasy\n\n# Access the AMDA data tree\namda_tree = spz.inventories.data_tree.amda\n\n# Navigate to specific parameters\nace_imf = amda_tree.Parameters.ACE.MFI.ace_imf_all.imf\ndata = get_data(ace_imf, \"2016-6-2\", \"2016-6-3\");","category":"page"},{"location":"tutorial/#Using-Macro","page":"Tutorial","title":"Using Macro","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can also use macro @spz_str to define multiple products:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"products = spz\"cda/OMNI_HRO_1MIN/flow_speed,E,Pressure\"\nPressure_product = products[3]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Products are function-like objects, so you can call them with time intervals as arguments to get the data:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Pressure_product(\"2016-6-2\", \"2016-6-3\")","category":"page"},{"location":"tutorial/#Multiple-Parameters","page":"Tutorial","title":"Multiple Parameters","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can request multiple parameters at once and get them as a NamedTuple:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"products = [\n    spz.inventories.tree.amda.Parameters.Wind.SWE.wnd_swe_kp.wnd_swe_vth,\n    spz.inventories.tree.amda.Parameters.Wind.SWE.wnd_swe_kp.wnd_swe_pdyn,\n    spz.inventories.tree.amda.Parameters.Wind.SWE.wnd_swe_kp.wnd_swe_n\n]\n\ndata = get_data(NamedTuple, products, \"2010-01-02\", \"2010-01-02T01\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"data.wnd_swe_n","category":"page"},{"location":"tutorial/#Multiple-Time-Intervals","page":"Tutorial","title":"Multiple Time Intervals","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can also request data for multiple time intervals:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"products = [\n    \"cda/OMNI_HRO_1MIN/flow_speed\",\n    \"cda/OMNI_HRO_1MIN/Pressure\"\n]\n\nintervals = [\n    [\"2010-01-02\", \"2010-01-02T01\"], \n    [\"2009-08-02\", \"2009-08-02T01\"]\n]\n\nget_data(products, intervals)","category":"page"},{"location":"tutorial/#Working-with-SSC-Data","page":"Tutorial","title":"Working with SSC Data","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For trajectory data from SSCWeb:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Get spacecraft trajectory (default is GSE)\ntrajectory = get_data(\"ssc/wind\", \"2016-6-2\", \"2016-6-3\")\n\n# Specify coordinate system \ntrajectory_gsm = get_data(\"ssc/wind/gsm\", \"2016-6-2\", \"2016-6-3\")","category":"page"},{"location":"tutorial/#Accessing-Data-Properties","page":"Tutorial","title":"Accessing Data Properties","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"times(data.wnd_swe_n) # timestamps\nparent(data.wnd_swe_n) # data values","category":"page"}]
}
